import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
buildscript {
	ext {
		camelVersion = "4.0.0-M1"
		mqJmsVersion = "3.0.2"  // for JDK17
		jakartaVersion = "10.0.0"
	}
}
plugins {
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.jetbrains.kotlin.jvm' version '1.7.22'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.apache.camel.springboot:camel-spring-boot-bom:$camelVersion"
	}
}
dependencies {
	implementation(
			'org.apache.camel.springboot:camel-spring-boot-starter',
			'org.jetbrains.kotlin:kotlin-reflect',
			'org.jetbrains.kotlin:kotlin-stdlib-jdk8',
			"com.ibm.mq:mq-jms-spring-boot-starter:$mqJmsVersion",
			"org.apache.camel:camel-jms:$camelVersion",
			// prefer jms-api only, jakartaee brings too much libs
			"javax.jms:javax.jms-api:2.0.1",
			// "jakarta.platform:jakarta.jakartaee-api:$jakartaVersion",
			// here use spring-web to keep camel context alive, otherwise we need to explicitly start camel context
			"org.springframework.boot:spring-boot-starter-web",
	)

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '17'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
